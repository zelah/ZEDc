#include<stdio.h>
#include<stdlib.h>
 
typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long lu;
  signed long ls;
  long long ll;
  unsigned long long ul;
  signed long long sl;
  float fl;
  double db;
  long double ld;
  z *y;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long lu;
typedef signed long ls;
typedef long long ll;
typedef unsigned long long ul;
typedef signed long long sl;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *y;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
ul const block=1024;

z n();

z ps(z object,z stack);

ul e(z object);

ul size(ul extent);

void f(z stack);

z inc(z character);

z mp(z fun,z stack);

z kp(z fun,z stack);

z rv(z stack);

z kp1(z fun,z stack,z result);

ul sz(z number);

z c(z object);

z tp(z stack);

z pp(z stack);

z rd(z fin,z fun,z stack);

z rd1(z fun,z stack);

void displaySpace(z object);

void display(z object);

void display1(z object);

z t(z pair);

z p(z pair);

z ad(z one,z two);

z lt(z one,z two);

uc lt1(z one,z two);

uc as(z value);

z ad4(z one,z two);

z ad3(z one,z two,uc carry,ul index1,ul index2);

uc ad2(uc one,uc two,uc carry);

uc ad1(uc one,uc two,uc carry);

void displayLine(z object);

z sb(z one,z two);

z sb3(z one,z two,uc borrow,ul index1,ul index2);

uc sb2(uc one,uc two,uc borrow);

uc sb1(uc one,uc two,uc borrow);

z sb4(z value);

z mu(z one,z two);

z u(z one,z two);

z mu2(z one,z two,z control);

z gt(z one,z two);

uc gt1(z one,z two);

z mu1(z one,z two,z control,z compare,z result);

z twice(z number);

z dv(z one,z two);

z dv2(z one,z two,z control);

z dv1(z one,z two,z control,z compare,z result);

z md(z one,z two);

z q(z one,z two);

uc q1(z one,z two);

z no(z value);

z nu(z value);

z v(z list);

z v1(z list,z result);

z r(z fin,z fun,z list);

z r1(z fun,z list);

z k(z fun,z list);

z k1(z fun,z list,z result);

z m(z fun,z list);

z m1(z fun,z list,z result);

z pr(z value);

z a(z one,z two);

z o(z one,z two);

z x(z one,z two);

z fm1(z number);

z uli(ul number);

z rr(ul count,z value);

z rr1(ul count,z value,z collect);

z fm2(ul zeros,z number);

z fm3(ul zeros,z number,z zero);

z fm4(z number);

z fm5(z number,z zero);

z fm6(ul count);

void nmSpace(z number);

void nm(z number);

void nmLine(z number);

z fm7(z small,z table);



z fm7(z small,z table)
{
  if(as(nu(c(small))))
  {
    f(table);
    return small;
  }
  else
  {
    z temp;
    temp=table.y[tp(t(c(small))).uc];
    return u(temp,fm7(p(small),table));
  }
}  

void nmLine(z number)
{
  nm(number);
  printf("\n");
}  

void nm(z number)
{
    ul i;
    for(i=3;i<=e(number);++i)
    {
      printf("%c",number.y[i].uc);
    } 
    f(number);
}  

void nmSpace(z number)
{
  nm(number);
  printf(" ");
}  

z fm6(ul count)
{
  return rr(count,uli(1));
}  

z fm5(z number,z zero)
{
  if(as(nu(c(number))))
  {
    return number;
  }
  else
  {
    z temp;
    temp=ps(tp(c(number)),c(zero));
    return u(temp,fm5(pp(number),zero));
  }
}  

z fm4(z number)
{
  return fm5(number,n());
}  

z fm3(ul zeros, z number,z zero)
{
  if(zeros==0)
  {
    return rv(number);
  }
  else
  {
    return fm3(zeros-1,ps(zero,number),zero);
  }
}  

z fm2(ul zeros,z number)
{
  z zero;
  zero.uc='0';
  return fm3(zeros,rv(number),zero);
}  

z rr1(ul count,z value,z collect)
{
  if(count==0)
  {
    return collect;
  }
  else
  {
    return rr1(count-1,value,ps(value,collect));
  }
}    

z rr(ul count,z value)
{
  return rr1(count,value,n());
}    

z uli(ul number)
{
  z value;
  value.ul=number;
  return value;
}  

z fm1(z number)
{
  z table;
  table=rr(57,uli(0));
  z multiplier;
  z character;
  table.y['0']=n();
  character.uc='1';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['1']=mu(multiplier,c(number));
  character.uc='2';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['2']=mu(multiplier,c(number));
  character.uc='3';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['3']=mu(multiplier,c(number));
  character.uc='4';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['4']=mu(multiplier,c(number));
  character.uc='5';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['5']=mu(multiplier,c(number));
  character.uc='6';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['6']=mu(multiplier,c(number));
  character.uc='7';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['7']=mu(multiplier,c(number));
  character.uc='8';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['8']=mu(multiplier,c(number));
  character.uc='9';
  multiplier=n();
  multiplier=ps(character,multiplier);
  table.y['9']=mu(multiplier,c(number));
  f(number);
  return table;
}  

z x(z one,z two)
{
  if(one.y[1].uc)
  {
    f(one);
    return no(two);
  }
  else
  {
    f(one);
    return two;
  }
}  

z o(z one,z two)
{
  if(one.y[1].uc)
  {
    f(two);
    return one;
  }
  else
  {
    f(one);
    return two;
  }
}  

z a(z one,z two)
{
  if(one.y[1].uc)
  {
    f(one);
    return two;
  }
  else
  {
    f(two);
    return one;
  }
}  

z pr(z value)
{
  if(value.y[2].ul==0)
  {
    value.y[1].uc=0;
  }
  else
  {
    value.y[1].uc=1;
  }
  return value;
}  

z m1(z fun,z list,z result)
{
  if(sz(list)==0)
  {
    f(list);
    return result;
  }
  else
  {
    result=u(fun.f1(t(c(list))),result);
    return m1(fun,p(list),result);
  }
}  

z m(z fun,z list)
{
  return m1(fun,v(list),n());
}  

z k1(z fun,z list,z result)
{
  if(sz(list)==0)
  {
    f(list);
    return result;
  }
  else
  {
    z top;
    top=t(c(list));
    if(fun.f1(c(top)).uc)
    {
      result=u(c(top),result);
    }
    f(top);
    return k1(fun,p(list),result);
  }
}  

z k(z fun,z list)
{
  return k1(fun,v(list),n());
}  

z r1(z fun,z list)
{
  z rest;
  rest=p(c(list));
  if(sz(rest)==0)
  {
    f(rest);
    return t(list);
  }
  else
  {
    z temp;
    temp=fun.f2(t(rest),t(c(list)));
    return r1(fun,u(temp,p(p(list))));
  }
}  

z r(z fin,z fun,z list)
{
  return r1(fun,u(fin,v(list)));
}  

z v1(z list,z result)
{
  if(sz(list)==0)
  {
    f(list);
    return result;
  }
  else
  {
    result=u(t(c(list)),result);
    return v1(p(list),result);
  }
}  

z v(z list)
{
  return v1(list,n());
}  

z nu(z value)
{
  if(sz(value)==0)
  {
    value.y[1].uc=1;
  }
  else
  {
    value.y[1].uc=0;
  }
  return value;
}  

z no(z value)
{
  if(value.y[1].uc)
  {
    value.y[1].uc=0;
  }
  else
  {
    value.y[1].uc=1;
  }
  return value;
}  

uc q1(z one,z two)
{
  if(sz(one)==0)
  {
    f(one);
    f(two);
    return 1;
  }
  else
  {
    if(one.y[2].ul)
    {
      if(two.y[2].ul)
      {
        if(q1(t(c(one)),t(c(two))))
        {
          return q1(p(one),p(two));
        }
        else
        {
          f(one);
          f(two);
          return 0;
        }
      }
      else
      {
        f(one);
        f(two);
        return 0;
      }
    }
    else
    {
      if(two.y[2].ul)
      {
        f(one);
        f(two);
        return 0;
      }
      else
      {
        if(one.y[3].uc==two.y[3].uc)
        {
          return q1(pp(one),pp(two));
        }
        else
        {
          f(one);
          f(two);
          return 0;
        }
      }
    }
  }
}  

z q(z one,z two)
{
  if(sz(one)==sz(two)&&q1(one,c(two)))
  {
    two.y[1].uc=1;
    return two;
  }
  else
  {
    two.y[1].uc=0;
    return two;
  }
}  

z md(z one,z two)
{
  return sb(one,mu(two,dv(c(one),c(two))));
}  

z dv1(z one,z two,z control,z compare,z result)
{
  if(sz(two)==0)
  {
    f(one);
    f(two);
    f(control);
    f(compare);
    return result;
  }
  else
  {
    if(as(gt(ad(t(c(two)),c(compare)),c(one))))
    {
      two=p(two);
      control=p(control);
    }
    else
    {
      compare=ad(compare,t(c(two)));
      two=p(two);
      result=ad(result,t(c(control)));
      control=p(control);
    }
    return dv1(one,two,control,compare,result);
  }
}  

z dv2(z one,z two,z control)
{
  if(as(gt(t(c(two)),c(one))))
  {
    return dv1(one,p(two),p(control),n(),n());
  }
  else
  {
    z result;
    result=dv2(one,u(twice(t(c(two))),c(two)),u(twice(t(c(control))),c(control)));
    f(two);
    f(control);
    return result;
  }
}  

z dv(z one,z two)
{
  if(sz(one)==0)
  {
    f(one);
    f(two);
    return n();
  }
  else
  {
    z val;
    val.uc='1';
    return dv2(one,u(two,n()),u(ps(val,n()),n()));
  }
}  

z twice(z number)
{
  z result;
  result=ad(c(number),c(number));
  f(number);
  return result;
}  

z mu1(z one,z two,z control,z compare,z result)
{
  if(sz(two)==0)
  {
    f(one);
    f(two);
    f(control);
    f(compare);
    return result;
  }
  else
  {
    if(as(gt(ad(t(c(control)),c(compare)),c(one))))
    {
      control=p(control);
      two=p(two);
    }
    else
    {
      compare=ad(compare,t(c(control)));
      control=p(control);
      result=ad(result,t(c(two)));
      two=p(two);
    }
    return mu1(one,two,control,compare,result);
  }
}  

uc gt1(z one,z two)
{
  if(sz(two)==0)
  {
    f(one);
    f(two);
    return 0;
  }
  else if(one.y[3].uc>two.y[3].uc)
  {
    f(one);
    f(two);
    return 1;
  }
  else if(one.y[3].uc<two.y[3].uc)
  {
    f(one);
    f(two);
    return 0;
  }
  else
  {
    return gt1(pp(one),pp(two));
  }
}  

z gt(z one,z two)
{
  if(sz(one)>sz(two)||(sz(one)==sz(two)&&gt1(c(one),c(two))))
  {
    f(two);
    one.y[1].uc=1;
    return one;
  }
  else
  {
    f(one);
    two.y[1].uc=0;
    return two;
  }
}  

z mu2(z one,z two,z control)
{
  if(as(gt(t(c(control)),c(one))))
  {
    return mu1(one,p(two),p(control),n(),n());
  }
  else
  {
    z result;
    result=mu2(one,u(twice(t(c(two))),c(two)),u(twice(t(c(control))),c(control)));
    f(two);
    f(control);
    return result;
  }
}  

z u(z one,z two)
{
  ul ex=e(one)+e(two)+3;
  ul sz=size(ex);
  ul i;
  if(sz==size(e(two)))
  {
    two.y[1].uc=1;
    two.y-=e(one)+1;
    two.y[0]=one.y[0];
    two.y[1].uc=1;
    for(i=2;i<=e(one);++i)
    {
      two.y[i]=one.y[i];
    }
    two.y-=2;
    two.y[0].ul=ex;
    two.y[1].uc=1;
    f(one);
    return two;
  }
  else
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(one)-e(two)-3;
    result.y[0].ul=ex;
    result.y[1].uc=1;
    result.y+=2;
    result.y[0]=one.y[0];
    result.y[1].uc=1;
    for(i=2;i<=e(one);++i)
    {
      result.y[i]=one.y[i];
    }
    result.y+=e(one)+1;
    result.y[0]=two.y[0];
    result.y[1].uc=1;
    for(i=2;i<=e(two);++i)
    {
      result.y[i]=two.y[i];
    }
    result.y-=e(one)+1;
    result.y-=2;
    f(one);
    f(two);
    return result;
  }
}  

z mu(z one,z two)
{
  if(sz(one)==0||sz(two)==0)
  {
    f(one);
    f(two);
    return n();
  }
  else
  {
    z val;
    val.uc='1';
    return mu2(one,u(two,n()),u(ps(val,n()),n()));
  }
}  

z sb4(z value)
{
  if(sz(value)==0)
  {
    return value;
  }
  else if(value.y[3].uc=='0')
  {
    return sb4(pp(value));
  }
  else
  {
    return value;
  }
}  

uc sb1(uc one,uc two,uc borrow)
{
  return one<two+borrow;
}  

uc sb2(uc one,uc two,uc borrow)
{
  return (sb1(one,two,borrow)?one+'0'+10-two:one+'0'-two)-borrow;
}  

z sb3(z one,z two,uc borrow,ul index1,ul index2)
{
  if(index2==2&&borrow==0)
  {
    f(two);
    return one;
  }
  uc one1;
  uc two1;
  if(index1==2)
  {
    one1='0';
  }
  else
  {
    one1=one.y[index1].uc;
    --index1;
  }
  if(index2==2)
  {
    two1='0';
  }
  else
  {
    two1=two.y[index2].uc;
    --index2;
  }
  uc temp=sb2(one1,two1,borrow);
  one.y[index1+1].uc=temp;
  return sb3(one,two,sb1(one1,two1,borrow),index1,index2);
}  

z sb(z one,z two)
{
  return sb4(sb3(one,two,0,e(one),e(two)));
}  

void displayLine(z object)
{
  display(object);
  printf("\n");
}  

uc ad1(uc one,uc two,uc carry)
{
  return one+two+carry>'0'+'9';
}  

uc ad2(uc one,uc two,uc carry)
{
  uc compare=one+two+carry-'0';
  if(compare>'9')
  {
    return compare-10;
  }
  else
  {
    return compare;
  }
}  

z ad3(z one,z two,uc carry,ul index1,ul index2)
{
  if(index1==2&&carry==0)
  {
    f(one);
    return two;
  }
  if(index2==2&&carry)
  {
    z val;
    val.uc='1';
    f(one);
    return ps(val,two);
  }
  uc one1;
  uc two1;
  if(index1==2)
  {
    one1='0';
  }
  else
  {
    one1=one.y[index1].uc;
    --index1;
  }
  if(index2==2)
  {
    two1='0';
  }
  else
  {
    two1=two.y[index2].uc;
    --index2;
  }
  uc temp=ad2(one1,two1,carry);
  two.y[index2+1].uc=temp;
  return ad3(one,two,ad1(one1,two1,carry),index1,index2);
}  

z ad4(z one,z two)
{
  return ad3(one,two,0,e(one),e(two));
}  

uc as(z value)
{
  uc result=value.y[1].uc;
  f(value);
  return result;
}  

uc lt1(z one,z two)
{
  if(sz(one)==0)
  {
    f(one);
    f(two);
    return 0;
  }
  else if(one.y[3].uc<two.y[3].uc)
  {
    f(one);
    f(two);
    return 1;
  }
  else if(one.y[3].uc>two.y[3].uc)
  {
    f(one);
    f(two);
    return 0;
  }
  else
  {
    return lt1(pp(one),pp(two));
  }
}  

z lt(z one,z two)
{
  if(sz(one)<sz(two)||(sz(one)==sz(two)&&lt1(c(one),c(two))))
  {
    f(two);
    one.y[1].uc=1;
    return one;
  }
  else
  {
    f(one);
    two.y[1].uc=0;
    return two;
  }
}  

z ad(z one,z two)
{
  if(as(lt(c(one),c(two))))
  {
    return ad4(one,two);
  }
  else
  {
    return ad4(two,one);
  }
}  

z p(z pair)
{
  z result;
  pair.y+=2;
  ul jump=e(pair)+1;
  pair.y+=jump;
  result=c(pair);
  pair.y-=jump;
  pair.y-=2;
  f(pair);
  return result;
}  

z t(z pair)
{
  z result;
  pair.y+=2;
  result=c(pair);
  pair.y-=2;
  f(pair);
  return result;
}  

void display1(z object)
{
  if(object.y[2].ul)
  {
    printf("[]");
  }
  else
  {
    printf("[%llu]",e(object)-2);
  }
  if(object.y[2].ul)
  {
    display1(t(c(object)));
    display1(p(object));
  }
  else
  {
    ul i;
    for(i=3;i<=e(object);++i)
    {
      printf("%c",object.y[i].uc);
    } 
    f(object);
  }
}  

void display(z object)
{
  if(object.y[1].uc==0)
  {
    printf("{false}");
  }
  display1(object);
}  

void displaySpace(z object)
{
  display(object);
  printf(" ");
}  

z rd1(z fun,z stack)
{
  if(sz(stack)==1)
  {
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(tp(pp(c(stack))),tp(c(stack)));
    stack=pp(pp(stack));
    return rd1(fun,ps(combined,stack));
  }
}  

z rd(z fin,z fun,z stack)
{
  return rd1(fun,ps(fin,rv(stack)));
}  

z pp(z stack)
{
  ul sz=size(e(stack)-1);
  if(sz<e(stack))
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y[0].ul=e(stack)-1;
    result.y[1].uc=1;
    result.y[2].ul=0;
    ul i;
    ++stack.y;
    for(i=3;i<=e(result);++i)
    {
      result.y[i]=stack.y[i];
    }
    --stack.y;
    f(stack);
    return result;
  }
  else
  {
    stack.y[3].ul=0;
    stack.y[2].uc=1;
    stack.y[1].ul=e(stack)-1;
    ++stack.y;
    return stack;
  }
}  

z tp(z stack)
{
  z result=stack.y[3];
  f(stack);
  return result;
}  

z c(z object)
{
  ul sz=size(e(object));
  z result;
  result.y=(y)malloc((sz+1)*sizeof(z));
  result.y+=sz-e(object);
  ul i;
  for(i=0;i<=e(object);++i)
  {
    result.y[i]=object.y[i];
  }
  return result;
}  

ul sz(z number)
{
  return e(number)-2;
}  

z kp1(z fun,z stack,z result)
{
  if(sz(stack)==0)
  {
    f(stack);
    return result;
  }
  else
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
    }
    return kp1(fun,pp(stack),result);
  }
}  

z rv(z stack)
{
  stack.y[1].uc=1;
  ul i;
  z temp;
  ul r=e(stack);
  ul m=(r+2)/2;
  for(i=3;i<=m;++i)
  {
    temp=stack.y[i];
    stack.y[i]=stack.y[r];
    stack.y[r]=temp;
    --r;
  }
  return stack;
}  

z kp(z fun,z stack)
{
  return kp1(fun,rv(stack),n());
}  

z mp(z fun,z stack)
{
  stack.y[1].uc=1;
  ul i;
  for(i=3;i<=e(stack);++i)
  {
    stack.y[i]=fun.f1(stack.y[i]);
  }
  return stack;
}  

z inc(z character)
{
  character.uc+=1;
  return character;
}  

void f(z stack)
{
  ul sz=size(e(stack));
  stack.y-=sz-e(stack);
  free(stack.y);
}  

ul size(ul extent)
{
  return ((extent-1)/block+1)*block;
}  

ul e(z object)
{
  return object.y[0].ul;
}  

z ps(z object,z stack)
{
  ul sz=size(e(stack)+1);
  if(e(stack)+block==sz)
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(stack)-1;
    result.y[0].ul=e(stack)+1;
    result.y[1].uc=1;
    result.y[2].ul=0;
    result.y[3]=object;
    ++result.y;
    ul i;
    for(i=3;i<=e(stack);++i)
    {
     result.y[i]=stack.y[i];
    }
    --result.y;
    f(stack);
    return result;
  }
  else
  {
    --stack.y;
    stack.y[0].ul=stack.y[1].ul+1;
    stack.y[1].uc=1;
    stack.y[2].ul=0;
    stack.y[3]=object;
    return stack;
  }
}  

z n()
{
  z result;
  result.y=(y)malloc((block+1)*sizeof(z));
  result.y+=block-2;
  result.y[0].ul=2;
  result.y[1].uc=1;
  result.y[2].ul=0;
  return result;
}  

int main()
{
  z val;
  z sta1;
  z sta2;
  z sta3;
  z sta4;
  z sta5;
  sta1=n();
  val.uc='1';
  sta1=ps(val,sta1);
  val.uc='2';
  sta1=ps(val,sta1);
  val.uc='3';
  sta1=ps(val,sta1);
  val.f1=&inc;
  sta1=kp(val,mp(val,sta1));
  val.f2=&ps;
  sta2=rd(n(),val,rv(c(sta1)));
  printf("(ad) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(ad(c(sta1),c(sta2)));
  printf("(sb) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(sb(c(sta1),c(sta2)));
  printf("(mu) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(mu(c(sta1),c(sta2)));
  printf("(dv) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(dv(c(sta1),c(sta2)));
  printf("(md) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(md(c(sta1),c(sta2)));
  printf("(lt) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(lt(c(sta1),c(sta2)));
  printf("(gt) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(gt(c(sta1),c(sta2)));
  printf("(q) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(q(c(sta1),c(sta2)));
  printf("(no) ");
  displaySpace(c(sta1));
  printf("= ");
  displayLine(no(c(sta1)));
  printf("(nu) ");
  displaySpace(c(sta1));
  printf("= ");
  displayLine(nu(c(sta1)));
  sta3=n();
  sta3=u(c(sta2),sta3);
  sta3=u(c(sta1),sta3);
  sta4=v(c(sta3));
  val.f2=&u;
  sta4=r(n(),val,sta4);
  val.f1=&twice;
  sta4=k(val,sta4);
  sta4=m(val,sta4);
  printf("(pr) ");
  displaySpace(c(sta3));
  printf("= ");
  displayLine(pr(c(sta3)));
  printf("(q) ");
  displaySpace(c(sta3));
  displaySpace(c(sta4));
  printf("= ");
  displayLine(q(c(sta3),c(sta4)));
  printf("(a) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(a(c(sta1),c(sta2)));
  printf("(o) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(o(c(sta1),c(sta2)));
  printf("(x) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(x(c(sta1),c(sta2)));
  printf("(a) (no) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(a(no(c(sta1)),c(sta2)));
  printf("(o) (no) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(o(no(c(sta1)),c(sta2)));
  printf("(x) (no) ");
  displaySpace(c(sta1));
  displaySpace(c(sta2));
  printf("= ");
  displayLine(x(no(c(sta1)),c(sta2)));
  printf("('0') (fm1) ");
  displaySpace(c(sta2));
  printf("= ");
  sta5=fm1(c(sta2));
  displayLine(c(sta5.y['0']));
  printf("('9') (fm1) ");
  displaySpace(c(sta2));
  printf("= ");
  displayLine(c(sta5.y['9']));
  printf("(fm2) 10 ");
  displaySpace(c(sta2));
  printf("= ");
  displayLine(fm2(10,c(sta2)));
  printf("(sz) ");
  displaySpace(c(sta2));
  printf("= %llu\n",sz(sta2));
  printf("(fm4) ");
  displaySpace(c(sta2));
  printf("= ");
  displayLine(fm4(c(sta2)));
  ul temp=10000;
  printf("(fm6) %llu = <array of ones>\n",temp);
  fm6(temp);
  printf("(nm) ");
  displaySpace(c(sta2));
  printf("= ");
  nmSpace(c(sta2));
  nmLine(c(sta2));
  printf("(fm7) (fm4) ");
  displaySpace(c(sta2));
  printf("(fm1) ");
  displaySpace(c(sta2));
  printf("= ");
  displayLine(fm7(fm4(c(sta2)),c(sta5)));
  return 0;
} 
